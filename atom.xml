<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joker E&#39;s Blog</title>
  
  <subtitle>成为更好的自己</subtitle>
  <link href="https://yh1820.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://yh1820.github.io/blog/"/>
  <updated>2025-04-29T06:52:48.337Z</updated>
  <id>https://yh1820.github.io/blog/</id>
  
  <author>
    <name>Joker E</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yh1820.github.io/blog/2025/04/29/hello-world/"/>
    <id>https://yh1820.github.io/blog/2025/04/29/hello-world/</id>
    <published>2025-04-29T06:52:48.337Z</published>
    <updated>2025-04-29T06:52:48.337Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL中的GROUP_CONCAT</title>
    <link href="https://yh1820.github.io/blog/2025/04/26/MySQL%E4%B8%AD%E7%9A%84GROUP-CONCAT/"/>
    <id>https://yh1820.github.io/blog/2025/04/26/MySQL%E4%B8%AD%E7%9A%84GROUP-CONCAT/</id>
    <published>2025-04-26T10:35:22.000Z</published>
    <updated>2025-04-29T06:52:48.337Z</updated>
    
    <content type="html"><![CDATA[<p>介于本人是一名卑微小前端，很多后端知识有所欠缺，在接触后端业务开发的时候，在部分需求用到了group by，但是又受到部分限制，学习到了GROUP_CONCAT这个函数，在此记录一下，以便日后查阅。</p><h3 id="什么是GROUP-CONCAT"><a href="#什么是GROUP-CONCAT" class="headerlink" title="什么是GROUP_CONCAT"></a>什么是GROUP_CONCAT</h3><p>GROUP_CONCAT函数是MySQL中的一个聚合函数，用于将分组后的结果连接成一个字符串。它可以将多行数据合并成一行，并且可以指定连接的分隔符。<br>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GROUP_CONCAT([<span class="keyword">DISTINCT</span>] 要连接的字段 [<span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序字段 <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span>] [SEPARATOR <span class="string">&#x27;分隔符&#x27;</span>])</span><br></pre></td></tr></table></figure><p>其中，DISTINCT表示去重，ORDER BY表示排序，SEPARATOR表示分隔符。</p><p>太抽象了，看不懂~</p><h3 id="在栗子中学习"><a href="#在栗子中学习" class="headerlink" title="在栗子中学习"></a>在栗子中学习</h3><p>大学生选体育课，每人选择一门课程，建表如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `class` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>需求是这样，找出选课人数大于50的课程，并将每门课对应的学生信息、学生数量找出来，拼成一个数组，结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;足球&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;selectNum&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;student&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;篮球&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;selectNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;student&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;王五&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>我第一个想到的就是group by，于是开开心心地写下了如下代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> class <span class="keyword">in</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> class</span><br><span class="line">  <span class="keyword">FROM</span> student</span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> class</span><br><span class="line">  <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">500</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>后端同学一看，天塌了，in string类型的参数，有点难崩啊。然后给我介绍了下<strong>GROUP_CONCAT</strong>，于是我又开始疯狂DeepSeek</p><p>GROUP_CONCAT函数可以将group by归类的多行数据合并成一行，并且可以指定连接的分隔符，也就是说可以这样子查:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> class, GROUP_CONCAT(id) <span class="keyword">as</span> ids</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> class</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">500</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><table><thead><tr><th>class</th><th>ids</th></tr></thead><tbody><tr><td>足球</td><td>1,2,3,4,5…</td></tr><tr><td>篮球</td><td>6,7,8,9,10…</td></tr><tr><td>排球</td><td>11,12,13,14,15…</td></tr></tbody></table><p>然后直接去in ids，就可以了。</p><p>这样子可以避免<strong>回表</strong>（select 中的查询字段不是索引（不在叶子结点上）。需要从磁盘中获取字段数据，多一次磁盘io查询）</p><p>虽说没啥用，效果都差不多，但是能优化一点是一点，也学到了新的知识，岂不美哉~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;介于本人是一名卑微小前端，很多后端知识有所欠缺，在接触后端业务开发的时候，在部分需求用到了group by，但是又受到部分限制，学习到了GROUP_CONCAT这个函数，在此记录一下，以便日后查阅。&lt;/p&gt;
&lt;h3 id=&quot;什么是GROUP-CONCAT&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="后端学习" scheme="https://yh1820.github.io/blog/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="MySQL" scheme="https://yh1820.github.io/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>在github上部署hexo</title>
    <link href="https://yh1820.github.io/blog/2025/04/26/%E5%9C%A8github%E4%B8%8A%E9%83%A8%E7%BD%B2hexo/"/>
    <id>https://yh1820.github.io/blog/2025/04/26/%E5%9C%A8github%E4%B8%8A%E9%83%A8%E7%BD%B2hexo/</id>
    <published>2025-04-26T03:19:02.000Z</published>
    <updated>2025-04-29T06:52:48.337Z</updated>
    
    <content type="html"><![CDATA[<p>本文章将介绍如何在github上通过两个项目部署hexo，为什么是两个项目呢？一个是用来存放源码（private仓库，以下简称source仓库），一个是用来存放静态页面（public仓库，以下简称page仓库）。</p><h2 id="自动部署流程"><a href="#自动部署流程" class="headerlink" title="自动部署流程"></a>自动部署流程</h2><ol><li>文章在source仓库中通过md文档的方式新增好</li><li>文章写好后直接push到source仓库</li><li>source仓库会直接自动触发Github Actions，Actions会自动将文档打包成静态页面文件，然后将静态页面文件push到page仓库</li><li>page仓库会自动触发Github Pages，Github Pages会自动将静态页面文件部署到github pages上</li></ol><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="一、github上配置项目"><a href="#一、github上配置项目" class="headerlink" title="一、github上配置项目"></a>一、github上配置项目</h3><h4 id="创建github项目"><a href="#创建github项目" class="headerlink" title="创建github项目"></a>创建github项目</h4><ol><li>创建一个blog-source <strong>私有仓库</strong>，用来存放<strong>源码</strong>,例如 <a href="https://github.com/&lt;your_github_username&gt;/blog-source.git">https://github.com/&lt;your_github_username&gt;/blog-source.git</a></li><li>创建一个blog-page仓库 <strong>公共仓库</strong>，用来<strong>存放静态文件</strong>以及<strong>部署Github Page页面</strong>,例如 <a href="https://github.com/&lt;your_github_username&gt;/blog-page.git">https://github.com/&lt;your_github_username&gt;/blog-page.git</a></li></ol><h4 id="自动化部署相关配置"><a href="#自动化部署相关配置" class="headerlink" title="自动化部署相关配置"></a>自动化部署相关配置</h4><ol><li>在本地电脑生成ssh密钥</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接回车跳过密码设置</span></span><br></pre></td></tr></table></figure><ol start="2"><li>添加公钥到blog-page仓库<ul><li>复制 ~&#x2F;.ssh&#x2F;id_ed25519.pub 公钥内容</li><li>进入blog-page仓库，点击Settings -&gt; Deploy keys -&gt; Add deploy key</li><li>Title为 ACTIONS_DEPLOY_KEY ，Key为复制的公钥内容</li><li>勾选 Allow write access 允许写入</li><li>点击 Add key 添加</li></ul></li><li>添加私钥到blog-source仓库<ul><li>复制 ~&#x2F;.ssh&#x2F;id_ed25519 私钥内容</li><li>进入blog-source仓库，点击Settings -&gt; Secrets and variables -&gt; Actions -&gt; New repository secret</li><li>Name为 ACTIONS_DEPLOY_KEY ，Value为复制的私钥内容</li><li>点击 Add secret 添加</li></ul></li></ol><h3 id="二、本地搭建hexo"><a href="#二、本地搭建hexo" class="headerlink" title="二、本地搭建hexo"></a>二、本地搭建hexo</h3><h4 id="新建本地项目"><a href="#新建本地项目" class="headerlink" title="新建本地项目"></a>新建本地项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.全局安装hexo</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 初始化hexo项目（<span class="built_in">source</span>仓库）</span></span><br><span class="line">mkdir blog-source</span><br><span class="line">cd blog-source</span><br><span class="line">hexo init</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 安装依赖</span>  </span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 添加github远程仓库</span></span><br><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/&lt;your_github_username&gt;/blog-source.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;init&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h4 id="自动化部署相关配置-1"><a href="#自动化部署相关配置-1" class="headerlink" title="自动化部署相关配置"></a>自动化部署相关配置</h4><ol><li>blog-source仓库根目录下新建.github&#x2F;workflows&#x2F;deploy.yml文件</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">main</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">source</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span>  <span class="comment"># 如果使用主题子模块需启用</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install -g hexo-cli  # 全局安装 Hexo</span></span><br><span class="line"><span class="string">        npm install</span></span><br><span class="line"><span class="string">        # 如果使用自定义主题可能需要额外安装</span></span><br><span class="line"><span class="string">        # npm install hexo-theme-xxx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">static</span> <span class="string">files</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">external_repository:</span> <span class="string">&lt;your_github_username&gt;/blog-page</span>  <span class="comment"># 部署仓库名</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="attr">keep_files:</span> <span class="literal">false</span>  <span class="comment"># 强制全量更新</span></span><br><span class="line">        <span class="attr">commit_message:</span> <span class="string">&#x27;Automated deployment: $&#123;&#123; github.sha &#125;&#125;&#x27;</span></span><br><span class="line">        <span class="attr">publish_branch:</span> <span class="string">main</span>  <span class="comment"># 部署到的分支</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改blog-source仓库根目录下_config.yml文件</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://&lt;your_github_username&gt;.github.io/blog-page/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog-page/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span> <span class="comment"># 文章资源文件夹</span></span><br><span class="line"><span class="attr">marked:</span> <span class="comment"># 启用后，资源图片将会被自动解析为其对应文章的路径。</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:&lt;your_github_username&gt;/blog-page.git</span>  <span class="comment"># blog-page仓库的 SSH 地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># 部署分支</span></span><br></pre></td></tr></table></figure><h3 id="三、配置Github-Pages"><a href="#三、配置Github-Pages" class="headerlink" title="三、配置Github Pages"></a>三、配置Github Pages</h3><p>首次将第二步的代码提交到blog-source仓库之后，Github Actions会自动触发部署，但是由于blog-page仓库还没有配置Github Pages，所以部署不会生效。等待Github Actions自动部署完成之后，再进入blog-page仓库，如果发现里面有GitHub Actions自动提交的代码了，就可以执行如下操作</p><ol><li>进入blog-page仓库，点击Settings -&gt; Pages</li><li>在Source中选择Deploy from a branch，然后在Branch中选择代码所在分支（一般为main），点击Save</li><li>等待Github Pages自动部署完成，然后就可以访问. 等待Github Pages自动部署完成，然后就可以访问 https:&#x2F;&#x2F;&lt;your_github_username&gt;.github.io&#x2F;blog-page&#x2F;了</li><li>首次配置成功后，后续的代码提交到blog-source仓库，Github Actions会自动触发部署，然后Github Pages会自动部署静态页面文件，就可以直接访问了</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文章将介绍如何在github上通过两个项目部署hexo，为什么是两个项目呢？一个是用来存放源码（private仓库，以下简称source仓库），一个是用来存放静态页面（public仓库，以下简称page仓库）。&lt;/p&gt;
&lt;h2 id=&quot;自动部署流程&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="Hexo" scheme="https://yh1820.github.io/blog/categories/Hexo/"/>
    
    
    <category term="hexo" scheme="https://yh1820.github.io/blog/tags/hexo/"/>
    
  </entry>
  
</feed>
