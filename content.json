[{"title":"Hello World","date":"2025-04-29T06:52:48.337Z","path":"2025/04/29/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"MySQL中的GROUP_CONCAT","date":"2025-04-26T10:35:22.000Z","path":"2025/04/26/MySQL中的GROUP-CONCAT/","text":"介于本人是一名卑微小前端，很多后端知识有所欠缺，在接触后端业务开发的时候，在部分需求用到了group by，但是又受到部分限制，学习到了GROUP_CONCAT这个函数，在此记录一下，以便日后查阅。 什么是GROUP_CONCATGROUP_CONCAT函数是MySQL中的一个聚合函数，用于将分组后的结果连接成一个字符串。它可以将多行数据合并成一行，并且可以指定连接的分隔符。语法如下： 1GROUP_CONCAT([DISTINCT] 要连接的字段 [ORDER BY 排序字段 ASC/DESC] [SEPARATOR &#x27;分隔符&#x27;]) 其中，DISTINCT表示去重，ORDER BY表示排序，SEPARATOR表示分隔符。 太抽象了，看不懂~ 在栗子中学习大学生选体育课，每人选择一门课程，建表如下： 1234567CREATE TABLE `student` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(255) DEFAULT NULL, `age` int(11) DEFAULT NULL, `class` varchar(255) DEFAULT NULL, ...) 需求是这样，找出选课人数大于50的课程，并将每门课对应的学生信息、学生数量找出来，拼成一个数组，结构如下： 1234567891011121314151617181920212223242526272829[ &#123; &quot;class&quot;: &quot;足球&quot;, &quot;selectNum&quot;: 2, &quot;student&quot;: [ &#123; &quot;id&quot;: 1, &quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 18 &#125;, &#123; &quot;id&quot;: 2, &quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 19 &#125; ] &#125;, &#123; &quot;class&quot;: &quot;篮球&quot;, &quot;selectNum&quot;: 1, &quot;student&quot;: [ &#123; &quot;id&quot;: 3, &quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 20 &#125; ] &#125;] 我第一个想到的就是group by，于是开开心心地写下了如下代码： 12345678SELECT *FROM studentWHERE class in ( SELECT class FROM student GROUP BY class HAVING COUNT(*) &gt; 500) 后端同学一看，天塌了，in string类型的参数，有点难崩啊。然后给我介绍了下GROUP_CONCAT，于是我又开始疯狂DeepSeek GROUP_CONCAT函数可以将group by归类的多行数据合并成一行，并且可以指定连接的分隔符，也就是说可以这样子查: 1234SELECT class, GROUP_CONCAT(id) as idsFROM studentGROUP BY classHAVING COUNT(*) &gt; 500 结果如下： class ids 足球 1,2,3,4,5… 篮球 6,7,8,9,10… 排球 11,12,13,14,15… 然后直接去in ids，就可以了。 这样子可以避免回表（select 中的查询字段不是索引（不在叶子结点上）。需要从磁盘中获取字段数据，多一次磁盘io查询） 虽说没啥用，效果都差不多，但是能优化一点是一点，也学到了新的知识，岂不美哉~","tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://yh1820.github.io/blog/tags/MySQL/"}]},{"title":"在github上部署hexo","date":"2025-04-26T03:19:02.000Z","path":"2025/04/26/在github上部署hexo/","text":"本文章将介绍如何在github上通过两个项目部署hexo，为什么是两个项目呢？一个是用来存放源码（private仓库，以下简称source仓库），一个是用来存放静态页面（public仓库，以下简称page仓库）。 自动部署流程 文章在source仓库中通过md文档的方式新增好 文章写好后直接push到source仓库 source仓库会直接自动触发Github Actions，Actions会自动将文档打包成静态页面文件，然后将静态页面文件push到page仓库 page仓库会自动触发Github Pages，Github Pages会自动将静态页面文件部署到github pages上 搭建步骤一、github上配置项目创建github项目 创建一个blog-source 私有仓库，用来存放源码,例如 https://github.com/&lt;your_github_username&gt;/blog-source.git 创建一个blog-page仓库 公共仓库，用来存放静态文件以及部署Github Page页面,例如 https://github.com/&lt;your_github_username&gt;/blog-page.git 自动化部署相关配置 在本地电脑生成ssh密钥 12ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;# 直接回车跳过密码设置 添加公钥到blog-page仓库 复制 ~&#x2F;.ssh&#x2F;id_ed25519.pub 公钥内容 进入blog-page仓库，点击Settings -&gt; Deploy keys -&gt; Add deploy key Title为 ACTIONS_DEPLOY_KEY ，Key为复制的公钥内容 勾选 Allow write access 允许写入 点击 Add key 添加 添加私钥到blog-source仓库 复制 ~&#x2F;.ssh&#x2F;id_ed25519 私钥内容 进入blog-source仓库，点击Settings -&gt; Secrets and variables -&gt; Actions -&gt; New repository secret Name为 ACTIONS_DEPLOY_KEY ，Value为复制的私钥内容 点击 Add secret 添加 二、本地搭建hexo新建本地项目123456789101112131415161718# 1.全局安装hexonpm install hexo-cli -g # 2. 初始化hexo项目（source仓库）mkdir blog-sourcecd blog-sourcehexo init # 3. 安装依赖 npm installnpm install hexo-deployer-git --save# 4. 添加github远程仓库git initgit remote add origin https://github.com/&lt;your_github_username&gt;/blog-source.gitgit add .git commit -m &quot;init&quot;git push -u origin main 自动化部署相关配置 blog-source仓库根目录下新建.github&#x2F;workflows&#x2F;deploy.yml文件 123456789101112131415161718192021222324252627282930313233343536373839name: Deploy to GitHub Pageson: push: branches: [main]jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout source uses: actions/checkout@v4 with: submodules: true # 如果使用主题子模块需启用 - name: Setup Node.js uses: actions/setup-node@v4 with: node-version: 20 - name: Install dependencies run: | npm install -g hexo-cli # 全局安装 Hexo npm install # 如果使用自定义主题可能需要额外安装 # npm install hexo-theme-xxx - name: Generate static files run: hexo clean &amp;&amp; hexo generate - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: deploy_key: $&#123;&#123; secrets.ACTIONS_DEPLOY_KEY &#125;&#125; external_repository: &lt;your_github_username&gt;/blog-page # 部署仓库名 publish_dir: ./public keep_files: false # 强制全量更新 commit_message: &#x27;Automated deployment: $&#123;&#123; github.sha &#125;&#125;&#x27; publish_branch: main # 部署到的分支 修改blog-source仓库根目录下_config.yml文件 123456789101112url: https://&lt;your_github_username&gt;.github.io/blog-page/root: /blog-page/post_asset_folder: true # 文章资源文件夹marked: # 启用后，资源图片将会被自动解析为其对应文章的路径。 prependRoot: true postAsset: truedeploy: type: git repo: git@github.com:&lt;your_github_username&gt;/blog-page.git # blog-page仓库的 SSH 地址 branch: main # 部署分支 三、配置Github Pages首次将第二步的代码提交到blog-source仓库之后，Github Actions会自动触发部署，但是由于blog-page仓库还没有配置Github Pages，所以部署不会生效。等待Github Actions自动部署完成之后，再进入blog-page仓库，如果发现里面有GitHub Actions自动提交的代码了，就可以执行如下操作 进入blog-page仓库，点击Settings -&gt; Pages 在Source中选择Deploy from a branch，然后在Branch中选择代码所在分支（一般为main），点击Save 等待Github Pages自动部署完成，然后就可以访问. 等待Github Pages自动部署完成，然后就可以访问 https:&#x2F;&#x2F;&lt;your_github_username&gt;.github.io&#x2F;blog-page&#x2F;了 首次配置成功后，后续的代码提交到blog-source仓库，Github Actions会自动触发部署，然后Github Pages会自动部署静态页面文件，就可以直接访问了","tags":[{"name":"hexo","slug":"hexo","permalink":"https://yh1820.github.io/blog/tags/hexo/"}]}]